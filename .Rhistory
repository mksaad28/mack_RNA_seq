getwd()
setwd('..')
setwd('..')
getwd()
getwd('/Users/Omen PC/Box/Bioinformatics/mack_RNA_seq/')
setwd('/Users/Omen PC/Box/Bioinformatics/mack_RNA_seq/')
# Be sure to set the right wd
source("api.R")
library(limma)
library(edgeR)
library(tidyverse)
library(clusterProfiler)
library(readxl)
## Necessary argument from orthology because neither tuna or mackerel genomes
## are in handy databases like ensembl, gene ontology, or kegg. First we read
## the cds from GCF_910596095.1 and extract the cds accession and the gene id.
## This is necessary because the cds from GCF_910596095.1 were fed into
## eggnogg-mapper. This file was downloaded from NCBI genomes.
a <- readLines("data/michael_saad/GCF_910596095.1/cds_from_genomic.accessions_only.fna")
query_to_gene <- tibble()
for (line in a) {
if (!str_starts(line, ">")) next
line_split <- str_split(line, " ")[[1]]
accession <- str_remove(line_split[1], ">")
# print(accession)
# print(line_split[2])
if (!str_detect(line_split[2], "gene")) stop("Missing gene in second field")
gene <- line_split[2] |>
str_remove(fixed("[gene=")) |>
str_remove(fixed("]"))
query_to_gene <- bind_rows(query_to_gene, bind_cols(query = accession, gene_id = gene))
# print("--")
}
## Then we read the eggnogg mapper excel file resulting from querying it with
## GCF_910596095.1/cds_from_genomic.fna and the default settings on
## http://eggnog-mapper.embl.de
eggnogg <- readxl::read_xlsx("data/michael_saad/MM_8hli8sc6.emapper.annotations.xlsx", skip = 2) |>
left_join(query_to_gene, by = "query") |>
select(gene_id, everything()) |>
group_by(gene_id) |>
slice_head(n = 1)
## Break the eggnogg results into long format
genes_and_brite <- eggnogg |>
select(gene_id, BRITE) |>
rename(brite = BRITE) |>
rowwise() |>
mutate(brite = str_split(brite, ",")) |>
unnest(cols = c(brite))
term_to_brite <- genes_and_brite[c('brite','gene_id')]
## get gene ontologies out of eggnogg.
term_to_gene <- eggnogg |>
select(gene_id, GOs) |>
filter(GOs != "-") |>
separate_rows(GOs, sep = ",") |>
rename(GO = GOs) |>
select(GO, gene_id)
# kegg categories from yanky br08902 file.
kegg_categories <- jsonlite::read_json("data/br08902.json") |>
unlist() |>
as_tibble() |>
separate(value, into = c("brite", NA), remove = FALSE, extra = "drop") |>
mutate(brite = str_replace(brite, "Protein", NA_character_)) |>
rename(category = value)
##### ------------ raw data ------
gene_lookup <- read_tsv("data/michael_saad/gene_result.txt",
col_types = cols(GeneID = col_character()),
guess_max = 10^10
) |>
select(Symbol, description) |>
unique() |>
group_by(`Symbol`) |>
summarize(
description = paste(description, collapse = ";"),
.groups = "drop"
) |> ## Assure a 1:1 mapping even when there are multiple entries for 1 ensembl ID
rename(gene_id = Symbol)
gene_lookup |>
group_by(gene_id) |>
summarize(n = n()) |>
filter(n != 1)
expr_long <- read_tsv("data/michael_saad/featurecounts_results.txt", skip = 1) |>
select(-Chr, -Start, -End, -Strand, -Length) |>
rename(gene_id = Geneid) |>
pivot_longer(-gene_id, names_to = "sample", values_to = "count") |>
mutate(sample = str_remove(sample, "STAR2/output/") |> str_remove("Aligned.sortedByCoord.out.bam"))
sample_lookup <- expr_long |>
select(sample) |>
unique() |>
separate(sample, into = c("passage", "protocol_replicate"), remove = FALSE) |>
mutate(
protocol = str_sub(protocol_replicate, 1, 1),
replicate = str_sub(protocol_replicate, 2, 2)
) |>
select(-protocol_replicate)
expr_long |>
group_by(gene_id) |>
summarize(prop_count0 = mean(count == 0)) |>
ggplot() +
aes(x = prop_count0) +
geom_histogram(binwidth = 0.1)
expr_clean <- expr_long |>
group_by(gene_id) |>
mutate(gene_prop_count0 = mean(count == 0)) |>
filter(gene_prop_count0 != 1) |>
select(-gene_prop_count0) |>
ungroup() ## ^^ Get rid of the genes which are always 0.
expr_wide <- expr_clean |>
pivot_wider(names_from = sample, values_from = count)
expr_wide_cpm <- expr_wide |>
select(-gene_id) |>
cpm() |>
as_tibble() |>
mutate(gene_id = expr_wide$gene_id) # counts per million
expr_long_cpm <- expr_wide_cpm |>
pivot_longer(-gene_id,
names_to = "sample",
values_to = "cpm"
)
expr_withmeta <- expr_clean |>
left_join(sample_lookup, by = "sample")
# Run CalcNormFactors and compare cpm to that without normalization --> conclusion, normalization doesn't change much
expr_wide_DGE <- expr_wide |>
select(-gene_id) |> DGEList()
expr_wide_DGE_norm <- calcNormFactors(expr_wide_DGE)
int_design <- model.matrix(~ passage * protocol,
data = sample_lookup |>
mutate(
protocol = relevel(factor(protocol), "p"),
passage = relevel(factor(passage), reference_passage)
)
)
int_design <- model.matrix(~ passage * protocol,
data = sample_lookup |>
mutate(
protocol = relevel(factor(protocol), "p"),
passage = relevel(factor(passage), reference_passage = 'p77')
)
)
int_design <- model.matrix(~ passage * protocol,
data = sample_lookup |>
mutate(
protocol = relevel(factor(protocol), "p"),
passage = relevel(factor(passage), "p77")
)
)
View(int_design)
